{"version":3,"sources":["components/TodoList/ListItem/ListItem.module.css","components/TodoBlock/TodoBlock.module.css","components/TodoList/ListItem/UserAction/UserAction.module.css","components/TodoList/TodoList.module.css","logo.svg","components/TodoBlock/TodoBlock.jsx","components/TodoList/ListItem/UserAction/UserAction.jsx","components/TodoList/ListItem/ListItem.jsx","components/TodoList/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoBlock","className","s","block","UserAction","btns","ListItem","props","console","log","item","sn","todo","message","TodoList","list","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,UAAY,4BAA4B,KAAO,uBAAuB,GAAK,uB,kBCA3HD,EAAOC,QAAU,CAAC,MAAQ,2B,gBCA1BD,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,yB,uECDzBD,EAAOC,QAAU,IAA0B,kC,8HCY5BC,EATG,WAChB,OACE,yBAAKC,UAAWC,IAAEC,OAChB,2BAAOF,UAAU,UACjB,4BAAQA,UAAU,UAAlB,S,gBCKSG,EATI,WACjB,OACE,yBAAKH,UAAWC,IAAEG,MAChB,4BAAQJ,UAAU,OAAlB,OACA,4BAAQA,UAAU,OAAlB,S,gBCUSK,EAZE,SAAAC,GAEf,OADAC,QAAQC,IAAIF,GAEV,wBAAIN,UAAWC,IAAEQ,MACf,yBAAKT,UAAWC,IAAES,IAAKJ,EAAMI,IAC7B,uBAAGV,UAAWC,IAAEU,MAAOL,EAAMM,SAE7B,kBAAC,EAAD,Q,gBCISC,EAXE,WACf,OACE,wBAAIb,UAAWC,IAAEa,MACf,kBAAC,EAAD,CAAUJ,GAAG,IAAIE,QAAQ,YACzB,kBAAC,EAAD,CAAUF,GAAG,IAAIE,QAAQ,YACzB,kBAAC,EAAD,CAAUF,GAAG,IAAIE,QAAQ,YACzB,kBAAC,EAAD,CAAUF,GAAG,IAAIE,QAAQ,cCShBG,EAZH,WACV,OACE,yBAAKf,UAAU,OACb,wBAAIA,UAAU,SAAd,aAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f8a0cac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListItem_item__1KpdJ\",\"activeBox\":\"ListItem_activeBox__1Mddn\",\"todo\":\"ListItem_todo__3P2ER\",\"sn\":\"ListItem_sn__1RWPl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"TodoBlock_block__3Fg8f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"UserAction_btns__34zan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoList_list__pgSb3\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport s from \"./TodoBlock.module.css\";\r\n\r\nconst TodoBlock = () => {\r\n  return (\r\n    <div className={s.block}>\r\n      <input className=\"input\" />\r\n      <button className=\"addBtn\">ADD</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoBlock;\r\n","import React from \"react\";\r\nimport s from \"./UserAction.module.css\";\r\n\r\nconst UserAction = () => {\r\n  return (\r\n    <div className={s.btns}>\r\n      <button className=\"add\">ADD</button>\r\n      <button className=\"del\">DEL</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAction;\r\n","import React from \"react\";\r\nimport UserAction from \"./UserAction/UserAction\";\r\n\r\nimport s from \"./ListItem.module.css\";\r\n\r\nconst ListItem = props => {\r\n  console.log(props);\r\n  return (\r\n    <li className={s.item}>\r\n      <div className={s.sn}>{props.sn}</div>\r\n      <p className={s.todo}>{props.message}</p>\r\n\r\n      <UserAction />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"./ListItem/ListItem\";\r\n\r\nimport s from \"./TodoList.module.css\";\r\n\r\nconst TodoList = () => {\r\n  return (\r\n    <ul className={s.list}>\r\n      <ListItem sn=\"1\" message=\"event 1\"/>\r\n      <ListItem sn=\"2\" message=\"event 2\"/>\r\n      <ListItem sn=\"3\" message=\"event 3\"/>\r\n      <ListItem sn=\"4\" message=\"event 4\"/>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// our components\nimport TodoBlock from \"./components/TodoBlock/TodoBlock\";\nimport TodoList from \"./components/TodoList/TodoList\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">ToDo list</h1>\n\n      <TodoBlock />\n      <TodoList />\n\t  \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}